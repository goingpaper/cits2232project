Database Design Document

Our project encapsulates a bar and beer information network. It contains information about various bars around the Perth area, and detailed information about the bar. As well as being an information repository on the various drinking establishments, it also acts as a social networking site, allowing users to sign up for extra functionality.

The way users interact with the database is similar to any social networking website, such as Facebook. Users can review bars, comment on other users’ pages, and ‘like’ beers. Each user’s activity can be seen on their user page, and users can edit the reviews and comments they have made.

Users can be given administrator rights by the owner of the database. Administrators have enhanced privileges, allowing them to interact much more fully with the database. An administrator account can edit the other users of the website, and also have the ability to modify the database. They can add or remove drinks, breweries, and can even remove other users from the system. 

The information on the bars, drinks, and users has been separated into two views: The list view and the detail view. The list view lists all available bars, drinks, or users in the database, and the information in the list view is limited as to not overcomplicate the webpage. When an entry is found on the list view that a user wishes to explore, the user can bring up the detail view on that particular item. The detail view contains all information regarding the item. An example is the bar detail view, which contains all information regarding the bar, along with the reviews of the bar by users, and the drinks that the bar serves.


The database sitting behind the application has been implemented using an underlying SQL architecture coupled with Django, a high-level Python web framework. The database is designed as a relational database, with Django to provide a web interface to the database. Django provides users with a user interface, which allows them to easily access the data stored in the database, and edit various parts of the database such as adding a comment or review.

In creating the schema for the database, the data was designed using a UML diagram and separated into tables that are only linked via primary keys in relationship classes. This was to avoid BCNF violations that could cause repetition and anomalies amongst the data. 

To normalise the data, the information was split into several different relations. The information is grouped according to several broad categories, such as user information and bar information. This is to avoid redundancy in the database, and allows modifications to one relation without other relations needing a manual update. This means that one table can be updated and the other tables will not be affected by the change of data stored. 


