Database Design Document

Our project encapsulates a bar and beer information network that users can access and modify. Information regarding bars and beverages can be accessed by users, and users may sign in and write reviews for bars and. The whole database has been implemented using underlying SQL coupled with Django, a high-level Python web framework.

The information on the bars, drinks, and users has been separated into two views: The list view and the detail view. The list view lists all available bars, drinks, or users in the database, and the information in the list view is limited as to not overcomplicate the webpage. When an entry is found on the list view that a user wishes to explore, the user can bring up the detail view on that particular item. The detail view contains all information regarding the item. An example is the bar detail view, which contains all information regarding the bar, along with the reviews of the bar by users, and the drinks that the bar serves.

The way users interact with the database is similar to any social networking website, such as Facebook. Users can review bars, comment on other users’ pages, and ‘like’ beers. A user’s activity can be seen by looking on their page.

Admins have special privileges, allowing them to insert, change or delete any part of the database.

The database is designed as a relational database with Django to provide a web interface to the database. In creating the schema for the database, the data was designed using a UML diagram and separated into tables that are only linked via primary keys in relationship classes. This was to avoid BCNF violations that could cause repetition and anomalies amongst the data.


